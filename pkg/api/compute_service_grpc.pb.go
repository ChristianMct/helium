// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: compute_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComputeService_GetCiphertext_FullMethodName = "/helium_proto.ComputeService/GetCiphertext"
	ComputeService_PutCiphertext_FullMethodName = "/helium_proto.ComputeService/PutCiphertext"
	ComputeService_PutShare_FullMethodName      = "/helium_proto.ComputeService/PutShare"
	ComputeService_StreamShares_FullMethodName  = "/helium_proto.ComputeService/StreamShares"
)

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeServiceClient interface {
	GetCiphertext(ctx context.Context, in *CiphertextRequest, opts ...grpc.CallOption) (*Ciphertext, error)
	PutCiphertext(ctx context.Context, in *Ciphertext, opts ...grpc.CallOption) (*CiphertextID, error)
	// PutShare is used to push the caller's share in the protocol described by the Share.ShareDescriptor
	// field to the callee.
	PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error)
	// StreamShares is a bidirectional stream of shares between the client and server
	StreamShares(ctx context.Context, opts ...grpc.CallOption) (ComputeService_StreamSharesClient, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) GetCiphertext(ctx context.Context, in *CiphertextRequest, opts ...grpc.CallOption) (*Ciphertext, error) {
	out := new(Ciphertext)
	err := c.cc.Invoke(ctx, ComputeService_GetCiphertext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) PutCiphertext(ctx context.Context, in *Ciphertext, opts ...grpc.CallOption) (*CiphertextID, error) {
	out := new(CiphertextID)
	err := c.cc.Invoke(ctx, ComputeService_PutCiphertext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ComputeService_PutShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) StreamShares(ctx context.Context, opts ...grpc.CallOption) (ComputeService_StreamSharesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComputeService_ServiceDesc.Streams[0], ComputeService_StreamShares_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceStreamSharesClient{stream}
	return x, nil
}

type ComputeService_StreamSharesClient interface {
	Send(*Share) error
	Recv() (*Share, error)
	grpc.ClientStream
}

type computeServiceStreamSharesClient struct {
	grpc.ClientStream
}

func (x *computeServiceStreamSharesClient) Send(m *Share) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeServiceStreamSharesClient) Recv() (*Share, error) {
	m := new(Share)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeServiceServer is the server API for ComputeService service.
// All implementations must embed UnimplementedComputeServiceServer
// for forward compatibility
type ComputeServiceServer interface {
	GetCiphertext(context.Context, *CiphertextRequest) (*Ciphertext, error)
	PutCiphertext(context.Context, *Ciphertext) (*CiphertextID, error)
	// PutShare is used to push the caller's share in the protocol described by the Share.ShareDescriptor
	// field to the callee.
	PutShare(context.Context, *Share) (*Void, error)
	// StreamShares is a bidirectional stream of shares between the client and server
	StreamShares(ComputeService_StreamSharesServer) error
	mustEmbedUnimplementedComputeServiceServer()
}

// UnimplementedComputeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (UnimplementedComputeServiceServer) GetCiphertext(context.Context, *CiphertextRequest) (*Ciphertext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiphertext not implemented")
}
func (UnimplementedComputeServiceServer) PutCiphertext(context.Context, *Ciphertext) (*CiphertextID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCiphertext not implemented")
}
func (UnimplementedComputeServiceServer) PutShare(context.Context, *Share) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutShare not implemented")
}
func (UnimplementedComputeServiceServer) StreamShares(ComputeService_StreamSharesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamShares not implemented")
}
func (UnimplementedComputeServiceServer) mustEmbedUnimplementedComputeServiceServer() {}

// UnsafeComputeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServiceServer will
// result in compilation errors.
type UnsafeComputeServiceServer interface {
	mustEmbedUnimplementedComputeServiceServer()
}

func RegisterComputeServiceServer(s grpc.ServiceRegistrar, srv ComputeServiceServer) {
	s.RegisterService(&ComputeService_ServiceDesc, srv)
}

func _ComputeService_GetCiphertext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CiphertextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).GetCiphertext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeService_GetCiphertext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).GetCiphertext(ctx, req.(*CiphertextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_PutCiphertext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ciphertext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).PutCiphertext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeService_PutCiphertext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).PutCiphertext(ctx, req.(*Ciphertext))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_PutShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).PutShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeService_PutShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).PutShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_StreamShares_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServiceServer).StreamShares(&computeServiceStreamSharesServer{stream})
}

type ComputeService_StreamSharesServer interface {
	Send(*Share) error
	Recv() (*Share, error)
	grpc.ServerStream
}

type computeServiceStreamSharesServer struct {
	grpc.ServerStream
}

func (x *computeServiceStreamSharesServer) Send(m *Share) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeServiceStreamSharesServer) Recv() (*Share, error) {
	m := new(Share)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeService_ServiceDesc is the grpc.ServiceDesc for ComputeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium_proto.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCiphertext",
			Handler:    _ComputeService_GetCiphertext_Handler,
		},
		{
			MethodName: "PutCiphertext",
			Handler:    _ComputeService_PutCiphertext_Handler,
		},
		{
			MethodName: "PutShare",
			Handler:    _ComputeService_PutShare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamShares",
			Handler:       _ComputeService_StreamShares_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "compute_service.proto",
}
