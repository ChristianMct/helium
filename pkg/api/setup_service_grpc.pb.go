// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetupServiceClient is the client API for SetupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetupServiceClient interface {
	// GetShare is used to get the share of the callee in the protocol described in the ShareRequest.
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Share, error)
	// PutShare is used to push the caller's share in the protocol described by the Share.ProtocolDesc
	//field to the callee.
	PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error)
}

type setupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSetupServiceClient(cc grpc.ClientConnInterface) SetupServiceClient {
	return &setupServiceClient{cc}
}

func (c *setupServiceClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Share, error) {
	out := new(Share)
	err := c.cc.Invoke(ctx, "/helium_proto.SetupService/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setupServiceClient) PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/helium_proto.SetupService/PutShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetupServiceServer is the server API for SetupService service.
// All implementations must embed UnimplementedSetupServiceServer
// for forward compatibility
type SetupServiceServer interface {
	// GetShare is used to get the share of the callee in the protocol described in the ShareRequest.
	GetShare(context.Context, *ShareRequest) (*Share, error)
	// PutShare is used to push the caller's share in the protocol described by the Share.ProtocolDesc
	//field to the callee.
	PutShare(context.Context, *Share) (*Void, error)
	mustEmbedUnimplementedSetupServiceServer()
}

// UnimplementedSetupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSetupServiceServer struct {
}

func (UnimplementedSetupServiceServer) GetShare(context.Context, *ShareRequest) (*Share, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (UnimplementedSetupServiceServer) PutShare(context.Context, *Share) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutShare not implemented")
}
func (UnimplementedSetupServiceServer) mustEmbedUnimplementedSetupServiceServer() {}

// UnsafeSetupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetupServiceServer will
// result in compilation errors.
type UnsafeSetupServiceServer interface {
	mustEmbedUnimplementedSetupServiceServer()
}

func RegisterSetupServiceServer(s grpc.ServiceRegistrar, srv SetupServiceServer) {
	s.RegisterService(&SetupService_ServiceDesc, srv)
}

func _SetupService_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetupServiceServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.SetupService/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetupServiceServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetupService_PutShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetupServiceServer).PutShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.SetupService/PutShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetupServiceServer).PutShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

// SetupService_ServiceDesc is the grpc.ServiceDesc for SetupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium_proto.SetupService",
	HandlerType: (*SetupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShare",
			Handler:    _SetupService_GetShare_Handler,
		},
		{
			MethodName: "PutShare",
			Handler:    _SetupService_PutShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "setup_service.proto",
}
