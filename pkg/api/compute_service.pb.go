// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.25.1
// source: compute_service.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CiphertextType is a enumerate type for identifying ciphertext types
type CiphertextType int32

const (
	CiphertextType_UNSPECIFIED_CT_TYPE CiphertextType = 0
	CiphertextType_BFV                 CiphertextType = 1
	CiphertextType_BGV                 CiphertextType = 2
	CiphertextType_CKKS                CiphertextType = 3
	CiphertextType_RGSW                CiphertextType = 4
)

// Enum value maps for CiphertextType.
var (
	CiphertextType_name = map[int32]string{
		0: "UNSPECIFIED_CT_TYPE",
		1: "BFV",
		2: "BGV",
		3: "CKKS",
		4: "RGSW",
	}
	CiphertextType_value = map[string]int32{
		"UNSPECIFIED_CT_TYPE": 0,
		"BFV":                 1,
		"BGV":                 2,
		"CKKS":                3,
		"RGSW":                4,
	}
)

func (x CiphertextType) Enum() *CiphertextType {
	p := new(CiphertextType)
	*p = x
	return p
}

func (x CiphertextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CiphertextType) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_service_proto_enumTypes[0].Descriptor()
}

func (CiphertextType) Type() protoreflect.EnumType {
	return &file_compute_service_proto_enumTypes[0]
}

func (x CiphertextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CiphertextType.Descriptor instead.
func (CiphertextType) EnumDescriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{0}
}

type ComputeStatus int32

const (
	ComputeStatus_COMPLETED ComputeStatus = 0
	ComputeStatus_CREATED   ComputeStatus = 1
	ComputeStatus_EXECUTING ComputeStatus = 2
)

// Enum value maps for ComputeStatus.
var (
	ComputeStatus_name = map[int32]string{
		0: "COMPLETED",
		1: "CREATED",
		2: "EXECUTING",
	}
	ComputeStatus_value = map[string]int32{
		"COMPLETED": 0,
		"CREATED":   1,
		"EXECUTING": 2,
	}
)

func (x ComputeStatus) Enum() *ComputeStatus {
	p := new(ComputeStatus)
	*p = x
	return p
}

func (x ComputeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_service_proto_enumTypes[1].Descriptor()
}

func (ComputeStatus) Type() protoreflect.EnumType {
	return &file_compute_service_proto_enumTypes[1]
}

func (x ComputeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeStatus.Descriptor instead.
func (ComputeStatus) EnumDescriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{1}
}

type Ciphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []byte              `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Metadata   *CiphertextMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Signature  *Signature          `protobuf:"bytes,3,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *Ciphertext) Reset() {
	*x = Ciphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ciphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ciphertext) ProtoMessage() {}

func (x *Ciphertext) ProtoReflect() protoreflect.Message {
	mi := &file_compute_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ciphertext.ProtoReflect.Descriptor instead.
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{0}
}

func (x *Ciphertext) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *Ciphertext) GetMetadata() *CiphertextMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Ciphertext) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CiphertextMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *CiphertextID   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type *CiphertextType `protobuf:"varint,2,opt,name=type,proto3,enum=helium_proto.CiphertextType,oneof" json:"type,omitempty"`
}

func (x *CiphertextMetadata) Reset() {
	*x = CiphertextMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiphertextMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiphertextMetadata) ProtoMessage() {}

func (x *CiphertextMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiphertextMetadata.ProtoReflect.Descriptor instead.
func (*CiphertextMetadata) Descriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{1}
}

func (x *CiphertextMetadata) GetId() *CiphertextID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CiphertextMetadata) GetType() CiphertextType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CiphertextType_UNSPECIFIED_CT_TYPE
}

type CiphertextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *CiphertextID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Signature *Signature    `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *CiphertextRequest) Reset() {
	*x = CiphertextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiphertextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiphertextRequest) ProtoMessage() {}

func (x *CiphertextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiphertextRequest.ProtoReflect.Descriptor instead.
func (*CiphertextRequest) Descriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{2}
}

func (x *CiphertextRequest) GetId() *CiphertextID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CiphertextRequest) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ComputeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeSignature *ComputeSignature `protobuf:"bytes,1,opt,name=ComputeSignature,proto3" json:"ComputeSignature,omitempty"`
	ComputeStatus    ComputeStatus     `protobuf:"varint,2,opt,name=ComputeStatus,proto3,enum=helium_proto.ComputeStatus" json:"ComputeStatus,omitempty"`
	ProtocolUpdate   *ProtocolUpdate   `protobuf:"bytes,3,opt,name=ProtocolUpdate,proto3,oneof" json:"ProtocolUpdate,omitempty"`
}

func (x *ComputeUpdate) Reset() {
	*x = ComputeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeUpdate) ProtoMessage() {}

func (x *ComputeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeUpdate.ProtoReflect.Descriptor instead.
func (*ComputeUpdate) Descriptor() ([]byte, []int) {
	return file_compute_service_proto_rawDescGZIP(), []int{3}
}

func (x *ComputeUpdate) GetComputeSignature() *ComputeSignature {
	if x != nil {
		return x.ComputeSignature
	}
	return nil
}

func (x *ComputeUpdate) GetComputeStatus() ComputeStatus {
	if x != nil {
		return x.ComputeStatus
	}
	return ComputeStatus_COMPLETED
}

func (x *ComputeUpdate) GetProtocolUpdate() *ProtocolUpdate {
	if x != nil {
		return x.ProtocolUpdate
	}
	return nil
}

var File_compute_service_proto protoreflect.FileDescriptor

var file_compute_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2a, 0x4f, 0x0a, 0x0e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x46, 0x56, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x56, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4b, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x47, 0x53, 0x57, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x32, 0xe9, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1b,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0d, 0x50, 0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x13, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x21, 0x5a,
	0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x64, 0x73, 0x65,
	0x63, 0x2f, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compute_service_proto_rawDescOnce sync.Once
	file_compute_service_proto_rawDescData = file_compute_service_proto_rawDesc
)

func file_compute_service_proto_rawDescGZIP() []byte {
	file_compute_service_proto_rawDescOnce.Do(func() {
		file_compute_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_service_proto_rawDescData)
	})
	return file_compute_service_proto_rawDescData
}

var file_compute_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_compute_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_compute_service_proto_goTypes = []interface{}{
	(CiphertextType)(0),        // 0: helium_proto.CiphertextType
	(ComputeStatus)(0),         // 1: helium_proto.ComputeStatus
	(*Ciphertext)(nil),         // 2: helium_proto.Ciphertext
	(*CiphertextMetadata)(nil), // 3: helium_proto.CiphertextMetadata
	(*CiphertextRequest)(nil),  // 4: helium_proto.CiphertextRequest
	(*ComputeUpdate)(nil),      // 5: helium_proto.ComputeUpdate
	(*Signature)(nil),          // 6: helium_proto.Signature
	(*CiphertextID)(nil),       // 7: helium_proto.CiphertextID
	(*ComputeSignature)(nil),   // 8: helium_proto.ComputeSignature
	(*ProtocolUpdate)(nil),     // 9: helium_proto.ProtocolUpdate
	(*Void)(nil),               // 10: helium_proto.Void
	(*Share)(nil),              // 11: helium_proto.Share
}
var file_compute_service_proto_depIdxs = []int32{
	3,  // 0: helium_proto.Ciphertext.metadata:type_name -> helium_proto.CiphertextMetadata
	6,  // 1: helium_proto.Ciphertext.signature:type_name -> helium_proto.Signature
	7,  // 2: helium_proto.CiphertextMetadata.id:type_name -> helium_proto.CiphertextID
	0,  // 3: helium_proto.CiphertextMetadata.type:type_name -> helium_proto.CiphertextType
	7,  // 4: helium_proto.CiphertextRequest.id:type_name -> helium_proto.CiphertextID
	6,  // 5: helium_proto.CiphertextRequest.signature:type_name -> helium_proto.Signature
	8,  // 6: helium_proto.ComputeUpdate.ComputeSignature:type_name -> helium_proto.ComputeSignature
	1,  // 7: helium_proto.ComputeUpdate.ComputeStatus:type_name -> helium_proto.ComputeStatus
	9,  // 8: helium_proto.ComputeUpdate.ProtocolUpdate:type_name -> helium_proto.ProtocolUpdate
	10, // 9: helium_proto.ComputeService.RegisterForCompute:input_type -> helium_proto.Void
	4,  // 10: helium_proto.ComputeService.GetCiphertext:input_type -> helium_proto.CiphertextRequest
	2,  // 11: helium_proto.ComputeService.PutCiphertext:input_type -> helium_proto.Ciphertext
	11, // 12: helium_proto.ComputeService.PutShare:input_type -> helium_proto.Share
	11, // 13: helium_proto.ComputeService.StreamShares:input_type -> helium_proto.Share
	5,  // 14: helium_proto.ComputeService.RegisterForCompute:output_type -> helium_proto.ComputeUpdate
	2,  // 15: helium_proto.ComputeService.GetCiphertext:output_type -> helium_proto.Ciphertext
	7,  // 16: helium_proto.ComputeService.PutCiphertext:output_type -> helium_proto.CiphertextID
	10, // 17: helium_proto.ComputeService.PutShare:output_type -> helium_proto.Void
	11, // 18: helium_proto.ComputeService.StreamShares:output_type -> helium_proto.Share
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_compute_service_proto_init() }
func file_compute_service_proto_init() {
	if File_compute_service_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compute_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ciphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiphertextMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiphertextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_compute_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_compute_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_compute_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_compute_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compute_service_proto_goTypes,
		DependencyIndexes: file_compute_service_proto_depIdxs,
		EnumInfos:         file_compute_service_proto_enumTypes,
		MessageInfos:      file_compute_service_proto_msgTypes,
	}.Build()
	File_compute_service_proto = out.File
	file_compute_service_proto_rawDesc = nil
	file_compute_service_proto_goTypes = nil
	file_compute_service_proto_depIdxs = nil
}
