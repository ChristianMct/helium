// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: helium.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliumHelperClient is the client API for HeliumHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliumHelperClient interface {
	Register(ctx context.Context, in *Void, opts ...grpc.CallOption) (HeliumHelper_RegisterClient, error)
	// PutShare is used to push the caller's share in the protocol described by the Share.ShareDescriptor
	// field to the callee.
	PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error)
	GetAggregationOutput(ctx context.Context, in *ProtocolDescriptor, opts ...grpc.CallOption) (*AggregationOutput, error)
	GetCiphertext(ctx context.Context, in *CiphertextRequest, opts ...grpc.CallOption) (*Ciphertext, error)
	PutCiphertext(ctx context.Context, in *Ciphertext, opts ...grpc.CallOption) (*CiphertextID, error)
}

type heliumHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliumHelperClient(cc grpc.ClientConnInterface) HeliumHelperClient {
	return &heliumHelperClient{cc}
}

func (c *heliumHelperClient) Register(ctx context.Context, in *Void, opts ...grpc.CallOption) (HeliumHelper_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliumHelper_ServiceDesc.Streams[0], "/helium_proto.HeliumHelper/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &heliumHelperRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliumHelper_RegisterClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type heliumHelperRegisterClient struct {
	grpc.ClientStream
}

func (x *heliumHelperRegisterClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *heliumHelperClient) PutShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/helium_proto.HeliumHelper/PutShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliumHelperClient) GetAggregationOutput(ctx context.Context, in *ProtocolDescriptor, opts ...grpc.CallOption) (*AggregationOutput, error) {
	out := new(AggregationOutput)
	err := c.cc.Invoke(ctx, "/helium_proto.HeliumHelper/GetAggregationOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliumHelperClient) GetCiphertext(ctx context.Context, in *CiphertextRequest, opts ...grpc.CallOption) (*Ciphertext, error) {
	out := new(Ciphertext)
	err := c.cc.Invoke(ctx, "/helium_proto.HeliumHelper/GetCiphertext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliumHelperClient) PutCiphertext(ctx context.Context, in *Ciphertext, opts ...grpc.CallOption) (*CiphertextID, error) {
	out := new(CiphertextID)
	err := c.cc.Invoke(ctx, "/helium_proto.HeliumHelper/PutCiphertext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeliumHelperServer is the server API for HeliumHelper service.
// All implementations must embed UnimplementedHeliumHelperServer
// for forward compatibility
type HeliumHelperServer interface {
	Register(*Void, HeliumHelper_RegisterServer) error
	// PutShare is used to push the caller's share in the protocol described by the Share.ShareDescriptor
	// field to the callee.
	PutShare(context.Context, *Share) (*Void, error)
	GetAggregationOutput(context.Context, *ProtocolDescriptor) (*AggregationOutput, error)
	GetCiphertext(context.Context, *CiphertextRequest) (*Ciphertext, error)
	PutCiphertext(context.Context, *Ciphertext) (*CiphertextID, error)
	mustEmbedUnimplementedHeliumHelperServer()
}

// UnimplementedHeliumHelperServer must be embedded to have forward compatible implementations.
type UnimplementedHeliumHelperServer struct {
}

func (UnimplementedHeliumHelperServer) Register(*Void, HeliumHelper_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedHeliumHelperServer) PutShare(context.Context, *Share) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutShare not implemented")
}
func (UnimplementedHeliumHelperServer) GetAggregationOutput(context.Context, *ProtocolDescriptor) (*AggregationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationOutput not implemented")
}
func (UnimplementedHeliumHelperServer) GetCiphertext(context.Context, *CiphertextRequest) (*Ciphertext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiphertext not implemented")
}
func (UnimplementedHeliumHelperServer) PutCiphertext(context.Context, *Ciphertext) (*CiphertextID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCiphertext not implemented")
}
func (UnimplementedHeliumHelperServer) mustEmbedUnimplementedHeliumHelperServer() {}

// UnsafeHeliumHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliumHelperServer will
// result in compilation errors.
type UnsafeHeliumHelperServer interface {
	mustEmbedUnimplementedHeliumHelperServer()
}

func RegisterHeliumHelperServer(s grpc.ServiceRegistrar, srv HeliumHelperServer) {
	s.RegisterService(&HeliumHelper_ServiceDesc, srv)
}

func _HeliumHelper_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliumHelperServer).Register(m, &heliumHelperRegisterServer{stream})
}

type HeliumHelper_RegisterServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type heliumHelperRegisterServer struct {
	grpc.ServerStream
}

func (x *heliumHelperRegisterServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliumHelper_PutShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliumHelperServer).PutShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.HeliumHelper/PutShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliumHelperServer).PutShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliumHelper_GetAggregationOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliumHelperServer).GetAggregationOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.HeliumHelper/GetAggregationOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliumHelperServer).GetAggregationOutput(ctx, req.(*ProtocolDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliumHelper_GetCiphertext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CiphertextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliumHelperServer).GetCiphertext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.HeliumHelper/GetCiphertext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliumHelperServer).GetCiphertext(ctx, req.(*CiphertextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliumHelper_PutCiphertext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ciphertext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliumHelperServer).PutCiphertext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium_proto.HeliumHelper/PutCiphertext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliumHelperServer).PutCiphertext(ctx, req.(*Ciphertext))
	}
	return interceptor(ctx, in, info, handler)
}

// HeliumHelper_ServiceDesc is the grpc.ServiceDesc for HeliumHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliumHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium_proto.HeliumHelper",
	HandlerType: (*HeliumHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutShare",
			Handler:    _HeliumHelper_PutShare_Handler,
		},
		{
			MethodName: "GetAggregationOutput",
			Handler:    _HeliumHelper_GetAggregationOutput_Handler,
		},
		{
			MethodName: "GetCiphertext",
			Handler:    _HeliumHelper_GetCiphertext_Handler,
		},
		{
			MethodName: "PutCiphertext",
			Handler:    _HeliumHelper_PutCiphertext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _HeliumHelper_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helium.proto",
}
