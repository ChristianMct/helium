# This scripts performs a persistence test of the setup protocol.
# It runs three nodes, `cloud`, `node-a`, and `node-b` inside a Docker compose.
# The node `cloud` is the aggregator for all sub-protocols, `node-a` and `node-b`
# are the clients.
#
# The cloud is always online.
# The first client (`node-a`) is configured to store data on the persistent storage.
# The second client (`node-b`) is configured to store data on the volatile memory.
#
# It consists of two phases:
#
# Phase 1: First Setup
# The three node execute the setup phase.
# After first the setup, the data generated by `node-a` during the protocol 
# will be saved on disk.
#
# Phase 2: Second Setup
# After both nodes have executed the setup protocol, the clients (`node-a` and `node-b`)
# are restarted. 
# Since `node-a` saved its state on disk, it should be able to retrieve the setup material
# from its internal store, instead of querying the cloud.
# Instead, `node-b` will have to query the cloud for output.
# 
# Cleanup:
# After the two phases are executed, the volume inside the docker compose is removed. 
#
# Both setup logs are saved on the host machine for inspection.

#!/bin/sh
SETUP_DURATION=5
TIME_TO_SAVE_LOGS=1
LOG_DIR="./out"
LOG_FILE_CLOUD=$LOG_DIR/setup_cloud.log
LOG_FILE_CLIENTS=$LOG_DIR/setup_clients.log

mkdir -p $LOG_DIR

echo "STARTING PHASE 1..."

docker compose --profile cloud up --detach
docker compose --profile cloud logs -f > ${LOG_FILE_CLOUD} &
sleep 1

echo "FIRST PHASE \n\n" > ${LOG_FILE_CLIENTS}
docker compose --profile clients up --detach
docker compose --profile clients logs -f >> ${LOG_FILE_CLIENTS} &
sleep $SETUP_DURATION

echo "RESTARTING CLIENTS..."
docker compose --profile clients down
echo "STARTING PHASE 2..."

docker compose --profile clients up --detach
echo "\n\n SECOND PHASE \n\n" >> ${LOG_FILE_CLIENTS}
docker compose --profile clients logs -f >> ${LOG_FILE_CLIENTS} &
sleep $SETUP_DURATION

echo "Second phase completed, killing all containers and removing volumes"
docker compose --profile all down -v