# This scripts performs a persistence test of the setup protocol.
# It runs three nodes, `cloud`, `node-a`, and `node-b` inside a Docker compose.
# The node `cloud` is the aggregator for all sub-protocols, `node-a` and `node-b`
# are be the clients.
#
# The cloud is always online.
# The first client (`node-a`) is configured to store data on the persistent storage.
# The second client (`node-b`) is configured to store data on the volatile memory.
#
# It consists of two phases:
#
# Phase 1: First Setup
# The three node execute the setup phase.
# After first the setup, the data generated by `node-a` during the protocol 
# will be saved on disk.
#
# Phase 2: Second Setup
# After both nodes have executed the setup protocol, the clients (`node-a` and `node-b`)
# are restarted. 
# Since `node-a` saved its state on disk, it should be able to retrieve the setup material
# from its internal store, instead of querying the cloud.
# Instead, `node-b` will have to query the cloud for output.
# 
# Cleanup:
# After the two phases are executed, the volume inside the docker compose is removed. 
#
# Both setups are logs are saved on the host machine for inspection.

#!/bin/sh
SETUP_DURATION=10
TIME_TO_SAVE_LOGS=1
LOG_DIR="./out"
FIRST_DIR=$LOG_DIR/first_setup
SECOND_DIR=$LOG_DIR/second_setup

# mkdir -p $LOG_DIR
mkdir -p $FIRST_DIR
mkdir -p $SECOND_DIR

echo "Starting Phase 1: Setup"
docker compose up --detach
echo "Waiting $SETUP_DURATION seconds for the setup to complete..."
sleep $SETUP_DURATION
echo "Saving compose logs"
docker compose logs -t node-a &> ${FIRST_DIR}/node-a.log
docker compose logs -t node-b &> ${FIRST_DIR}/node-b.log
docker compose logs -t cloud &> ${FIRST_DIR}/cloud.log

# sleep $TIME_TO_SAVE_LOGS
# echo "First setup completed, killing containers"
# docker compose down
echo "First setup completed, restarting clients (simulate both clients crashing)"
docker compose restart node-a node-b

echo "Starting Phase 2: Clients wake up"
# docker compose up --detach
echo "Waiting $SETUP_DURATION seconds for the setup to complete..."
sleep $SETUP_DURATION
echo "Saving compose logs"
docker compose logs -t node-a &> ${SECOND_DIR}/node-a.log
docker compose logs -t node-b &> ${SECOND_DIR}/node-b.log
docker compose logs -t cloud &> ${SECOND_DIR}/cloud.log
# docker-compose logs -f > ${LOG_DIR}/second_setup.log &
# sleep $TIME_TO_SAVE_LOGS
echo "Second phase completed, killing all containers"
docker compose down

echo "Cleaning up volumes in the container"
docker volume rm setup_persistence_node-a-data