package main

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/ldsec/helium/pkg/node"
	"github.com/ldsec/helium/pkg/pkg"
	"github.com/ldsec/helium/pkg/services/setup"
	"github.com/tuneinsight/lattigo/v4/rlwe"
)

func main() {

	n := 3
	t := 2

	galEls := []uint64{6997, 30609, 6797, 31745, 6177, 20745, 18945, 32637}
	// galEls = []uint64{
	// 	6997, 30609, 6797, 31745, 6177, 20745, 18945, 32637, 24693, 31209, 7697, 4849, 20277, 13941, 10185, 31681, 24189, 31153, 25473,
	// 	24833, 9949, 849, 6765, 24817, 20681, 30549, 10849, 13101, 25653, 27805, 10609, 19229, 27737, 24761, 1949, 4245, 14949, 23797,
	// 	20541, 1313, 18753, 553, 10649, 1037, 22281, 24017, 9609, 31137, 5889, 1425, 25081, 31993, 4725, 2405, 21477, 5593, 10553, 25761,
	// 	30501, 245, 30885, 22533, 24613, 2589, 13685, 15969, 24597, 11721, 1905, 545, 25037, 29965, 5117, 2629, 12877, 24677, 5285,
	// 	22117, 27501, 16301, 27833, 12565, 5613, 5709, 30721, 3617, 1133, 9649, 26477, 15405, 11313, 25837, 2689, 10625, 28325, 13277,
	// 	23409, 9129, 29437, 25925, 11753, 15365, 761, 21573, 9561, 21433, 11361, 2513, 22605, 273, 13505, 11369, 32445, 11085, 27413,
	// 	2765, 5, 3805, 14849, 27489, 16897, 24973, 1225, 19089, 13625, 15957, 20565, 20477, 28253, 22929, 27337, 28893, 25533, 29909,
	// 	2737, 28545, 30933, 28637, 2037, 57, 24037, 1365, 22005, 23353, 24681, 29493, 11897, 11849, 6565, 26281, 8325, 8389, 31321, 12945,
	// 	18733, 8093, 30529, 15665, 15557, 26269, 18361, 15873, 28129, 28249, 22449, 25505, 15625, 14249, 2217, 13081, 2889, 29697, 10557,
	// 	6009, 18741, 10601, 26497, 20033, 26441, 11489, 19821, 32401, 22657, 8069, 7145, 20405, 11973, 19585, 31345, 19997, 21225, 1413,
	// 	6489, 6085, 17537, 20773, 12101, 7605, 13497, 22785, 8405, 19153, 27201, 12893, 15377, 17693, 1025, 24889, 5717, 29445, 12521,
	// 	22217, 2557, 8861, 24981, 4081, 945, 23877, 12589, 4413, 10073, 14857, 109, 7277, 4401, 11253, 1357, 2933, 11145, 30881, 24949,
	// 	18113, 25029, 29621, 12077, 9525, 677, 28465, 14721, 21673, 5713, 19661, 16097, 22053, 1765, 1473, 333, 16609, 8749, 30417, 7937,
	// 	9369, 7125, 27617, 24657, 15309, 12281, 25585, 13393, 8829, 10193, 801, 29201, 4149, 1665, 28585, 26841, 7789, 24665, 21973, 17789,
	// 	6125, 26801, 31865, 19757, 15237, 19025, 9773, 2229, 16429, 11009, 28169, 12637, 26829, 28065, 11329, 32165, 12441, 27965, 26881,
	// 	4005, 27105, 19213, 26485, 10501, 10997, 16873, 19181, 5693, 9177, 7613, 28925, 6761, 8577, 30229, 25261, 29837, 3589, 18809, 23497,
	// 	6337, 29605, 24813, 11485, 1733, 26769, 4933, 25101, 17509, 3073, 11649, 26141, 20017, 14285, 10505, 2049, 16953, 4433, 7013, 25021,
	// 	29589, 5297, 15033, 21013, 31157, 1821, 19965, 28565, 11517, 30601, 11961, 13825, 26017, 7953, 5561, 15037, 22641, 26717, 16665,
	// 	11561, 22165, 3789, 8633, 12493, 17413, 16513, 285, 19629, 31381, 19349, 24917, 2957, 27797, 28229, 10061, 9081, 8753, 24245, 14873,
	// 	31177, 49, 8257, 6269, 18757, 27353, 15229, 10397, 30613, 6913, 21761, 18085, 10305, 32613, 3713, 5101, 12757, 32337, 23977, 30177,
	// 	4169, 17597, 32609, 26601, 11661, 125, 5993, 11101, 18605, 25161, 1521, 13517, 28509, 22957, 23769, 26285, 13021, 14981, 30625,
	// 	13865, 2297, 27357, 1429, 12781, 19813, 31685, 31697, 11537, 22081, 13145, 25249, 7065, 7821, 5921, 22737, 29221, 22401, 16977, 8969,
	// 	16481, 15381, 32737, 26425, 12113, 14445, 30045, 15477, 20845, 11349, 1353, 24117, 25833, 5421, 18561, 4521, 25781, 27941, 4353,
	// 	20237, 8705, 2061, 22277, 22149, 9745, 9209, 31973, 12025, 26561, 16153, 3133, 2881, 30425, 21053, 21781, 7101, 9253, 9601, 11473,
	// 	16869, 7913, 28609, 14309, 24013, 1217, 28713, 2857, 1053, 29753, 21993, 3125, 12249, 2101, 15733, 8857, 9629, 189, 23625, 15029,
	// 	27101, 9665, 28001, 6373, 27333, 28417, 5665, 14077, 22265, 12801, 18097, 1057, 25501, 5185, 13129, 21529, 11377, 23333, 19737,
	// 	16341, 6433, 3385, 12785, 18461, 5785, 17861, 481, 23593, 6825, 20737, 8933, 3081, 17033, 7577, 25, 25537, 2773, 14665, 24713, 13117,
	// 	5265, 20025, 21881, 24077, 28477, 21581, 9341, 16925, 625, 30369, 13633, 22009, 29361, 353, 18829, 641, 31781, 30861, 32113, 18197,
	// 	27521, 20609, 9105, 19217, 9573, 10173, 6785, 27097, 23809, 26753, 31105, 14361, 10977, 18473, 14901, 25449, 11741, 25997, 11289,
	// 	18157, 31617, 11757, 27037, 13553, 381, 14405, 32065, 8665, 8905, 28941, 4453, 22921, 30057, 4113, 21933, 11853, 26325, 17945, 1933,
	// 	9257, 20073, 20081, 29961, 21081, 12789, 1157, 27013, 16113, 6689, 23677, 1681, 1781, 28793, 3721, 8825, 5257, 13937, 14785, 16393,
	// 	16169, 6961, 11357, 2725, 31957, 12021, 4865, 31017, 3993, 15277, 25937, 14933, 22065, 15097, 3333, 29189, 23233}
	// galEls := []uint64{1, 5, 25, 125, 625, 3125, 15625, 12589, 62945, 52581, 761, 3805, 19025, 29589, 16873, 18829, 28609, 11973, 59865, 37181, 54833, 12021, 60105, 38381, 60833, 42021, 13497, 1949, 9745, 48725, 47017, 38477, 61313, 44421, 25497, 61949, 47601, 41397, 10377, 51885, 62817, 51941, 63097, 53341, 4561, 22805, 48489, 45837, 32577, 31813, 27993, 8893, 44465, 25717, 63049, 53101, 3361, 16805, 18489, 26909, 3473, 17365, 21289, 40909, 7937, 39685, 1817, 9085, 45425, 30517, 21513, 42029, 13537, 2149, 10745, 53725, 6481, 32405, 30953, 23693, 52929, 2501, 12505, 62525, 50481, 55797, 16841, 18669, 27809, 7973, 39865, 2717, 13585, 2389, 11945, 59725, 36481, 51333, 60057, 38141, 59633, 36021, 49033, 48557, 46177, 34277, 40313, 4957, 24785, 58389, 29801, 17933, 24129, 55109, 13401, 1469, 7345, 36725, 52553, 621, 3105, 15525, 12089, 60445, 40081, 3797, 18985, 29389, 15873, 13829}

	var testConfig = node.LocalTestConfig{
		FullNodes:  n,
		LightNodes: 0,
		Session: &pkg.SessionParameters{
			RLWEParams: rlwe.ParametersLiteral{
				LogN: 14,
				LogQ: []int{52, 47, 47, 47, 47, 47, 47},
				LogP: []int{52, 52},
			},
			// RLWEParams: rlwe.ParametersLiteral{
			// 	LogN:  15,
			// 	Sigma: rlwe.DefaultSigma,
			// 	H:     192,
			// 	Q: []uint64{
			// 		0x1fff90001,       // 32 Q0
			// 		0x4000000420001,   // 50
			// 		0x1fc0001,         // 25
			// 		0xffffffffffc0001, // 60 StC (30+30)
			// 		0x4000000120001,   // 50 Sine
			// 		0x40000001b0001,   // 50 Sine
			// 		0x3ffffffdf0001,   // 50 Sine
			// 		0x4000000270001,   // 50 Sine
			// 		0x3ffffffd20001,   // 50 Sine
			// 		0x3ffffffcd0001,   // 50 Sine
			// 		0x4000000350001,   // 50 Sine
			// 		0x3ffffffc70001,   // 50 Sine
			// 		0x1fffffff50001,   // 49 CtS
			// 		0x1ffffffea0001,   // 49 CtS
			// 	},
			// 	P: []uint64{
			// 		0x7fffffffe0001, // 51
			// 		0x8000000110001, // 51
			// 	},
			// },
			T: t,
		},
	}

	localtest := node.NewLocalTest(testConfig)
	all := localtest.SessionNodesIds()
	sd := setup.Description{
		Cpk: all,
		Rlk: all,
	}
	for _, galEl := range galEls {
		sd.GaloisKeys = append(sd.GaloisKeys, struct {
			GaloisEl  uint64
			Receivers []pkg.NodeID
		}{GaloisEl: galEl, Receivers: all})
	}

	sdJSON, err := json.MarshalIndent(sd, "", "\t")
	if err != nil {
		panic(err)
	}

	if errWrite := os.WriteFile("setup_desc.json", sdJSON, 0600); errWrite != nil {
		panic(errWrite)
	}

	for _, nc := range localtest.NodeConfigs {
		nc.Address = pkg.NodeAddress(":40000")
		ncJSON, errMarshal := json.MarshalIndent(nc, "", "\t")
		if errMarshal != nil {
			panic(errMarshal)
		}
		if err = os.WriteFile(fmt.Sprintf("%s.json", nc.ID), ncJSON, 0600); err != nil {
			panic(err)
		}
	}

	// nlJSON, err := json.MarshalIndent(localtest.NodeList, "", "\t")
	// if err != nil {
	// 	panic(err)
	// }
	// ioutil.WriteFile("nodelist.json", nlJSON, 0644)
}
