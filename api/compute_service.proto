syntax = "proto3";

option go_package = "github.com/ldsec/helium/pkg/api";

import "common.proto";

package helium_proto;

message Ciphertext {
    bytes ciphertext = 1;
    CiphertextMetadata metadata = 2;
    optional Signature signature = 3;
}

/* CiphertextType is a enumerate type for identifying ciphertext types */
enum CiphertextType {
    UNSPECIFIED_CT_TYPE = 0;
    BFV = 1; 
    BGV = 2; 
    CKKS = 3;
    RGSW = 4;
}

message CiphertextMetadata {
    optional CiphertextID id = 1;
    optional CiphertextType type = 2;
}

message CiphertextRequest {
    CiphertextID id = 1;
    optional Signature signature = 2;
}


message ComputeSignature {
    string CircuitName = 1;
    string CircuitID = 2;
}

enum ComputeStatus {
    COMPLETED = 0;
    CREATED = 1;
    EXECUTING = 2;
}

message ComputeUpdate {
    ComputeSignature ComputeSignature = 1;
    ComputeStatus ComputeStatus = 2;
    optional ProtocolUpdate ProtocolUpdate = 3;
}

service ComputeService {

    rpc RegisterForCompute(Void) returns (stream ComputeUpdate) {}

    rpc GetCiphertext(CiphertextRequest) returns (Ciphertext) {}

    rpc PutCiphertext(Ciphertext) returns (CiphertextID) {}

    /* PutShare is used to push the caller's share in the protocol described by the Share.ShareDescriptor
    field to the callee. */
    rpc PutShare (Share) returns (Void) {}

    /* StreamShares is a bidirectional stream of shares between the client and server */
    rpc StreamShares(stream Share) returns (stream Share) {}
}