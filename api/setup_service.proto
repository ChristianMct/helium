syntax = "proto3";

option go_package = "github.com/ldsec/helium/pkg/api";

import "common.proto";

package helium_proto;
 
/* ProtocolType is a enumerate type for identifying protocol types */
enum ProtocolType {
    UNSPECIFIED = 0;
    SKG = 1; /* secret-key generation */
    CKG = 2; /* public encryption-key generation */
    RKG = 3; /* public relinearization-key generation */
    RTG = 4; /* public rotation-key generation */
}

/* ProtocolDescriptor is a message type to describe a protocol by its type 
and arguments. It should be sufficient for parties to instantiate a protocol
within a given session */
message ProtocolDescriptor {
    ProtocolType Type = 1;
    map<string, string> Args = 3;
}

/* ShareRequest represents a request for a party's share in the protocol 
defined by its ProtocolDesc field. */
message ShareRequest {
    ProtocolID ProtocolID = 1;
    optional uint64 Round = 2;
    optional Share Previous = 3;
    repeated NodeID AggregateFor = 4;
    optional bool NoData = 5;
}

/* Share represents a party's share in the protocol described by its ProtocolDesc
field. */
message Share {
    ProtocolID ProtocolID = 1;
    optional uint64 Round = 2;
    bytes share = 3;
}

service SetupService {

    /* GetShare is used to get the share of the callee in the protocol described in the ShareRequest. */
    rpc GetShare (ShareRequest) returns (Share) {} 
    
    /* PutShare is used to push the caller's share in the protocol described by the Share.ProtocolDesc
    field to the callee. */
    rpc PutShare (Share) returns (Void) {}
}
