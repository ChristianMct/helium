// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: helium.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_Completed EventType = 0
	EventType_Started   EventType = 1
	EventType_Executing EventType = 2
	EventType_Failed    EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "Completed",
		1: "Started",
		2: "Executing",
		3: "Failed",
	}
	EventType_value = map[string]int32{
		"Completed": 0,
		"Started":   1,
		"Executing": 2,
		"Failed":    3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_helium_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_helium_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{0}
}

type ProtocolType int32

const (
	ProtocolType_UNSPECIFIED ProtocolType = 0
	ProtocolType_SKG         ProtocolType = 1 // secret-key generation
	ProtocolType_CKG         ProtocolType = 2 // public encryption-key generation
	ProtocolType_RKG_1       ProtocolType = 3 // first round of public relinearization-key generation
	ProtocolType_RKG         ProtocolType = 4 // second round of public relinearization-key generation
	ProtocolType_RTG         ProtocolType = 5 // public rotation-key generation
	ProtocolType_CKS         ProtocolType = 6 // collective switching to collective secret-key
	ProtocolType_DEC         ProtocolType = 7 // collective decryption
	ProtocolType_PCKS        ProtocolType = 8 // collective switching to known public-key
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SKG",
		2: "CKG",
		3: "RKG_1",
		4: "RKG",
		5: "RTG",
		6: "CKS",
		7: "DEC",
		8: "PCKS",
	}
	ProtocolType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SKG":         1,
		"CKG":         2,
		"RKG_1":       3,
		"RKG":         4,
		"RTG":         5,
		"CKS":         6,
		"DEC":         7,
		"PCKS":        8,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_helium_proto_enumTypes[1].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_helium_proto_enumTypes[1]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{1}
}

type CiphertextType int32

const (
	CiphertextType_UNSPECIFIED_CT_TYPE CiphertextType = 0
	CiphertextType_BFV                 CiphertextType = 1
	CiphertextType_BGV                 CiphertextType = 2
	CiphertextType_CKKS                CiphertextType = 3
	CiphertextType_RGSW                CiphertextType = 4
)

// Enum value maps for CiphertextType.
var (
	CiphertextType_name = map[int32]string{
		0: "UNSPECIFIED_CT_TYPE",
		1: "BFV",
		2: "BGV",
		3: "CKKS",
		4: "RGSW",
	}
	CiphertextType_value = map[string]int32{
		"UNSPECIFIED_CT_TYPE": 0,
		"BFV":                 1,
		"BGV":                 2,
		"CKKS":                3,
		"RGSW":                4,
	}
)

func (x CiphertextType) Enum() *CiphertextType {
	p := new(CiphertextType)
	*p = x
	return p
}

func (x CiphertextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CiphertextType) Descriptor() protoreflect.EnumDescriptor {
	return file_helium_proto_enumTypes[2].Descriptor()
}

func (CiphertextType) Type() protoreflect.EnumType {
	return &file_helium_proto_enumTypes[2]
}

func (x CiphertextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CiphertextType.Descriptor instead.
func (CiphertextType) EnumDescriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{2}
}

// MESSAGE DEFINITIONS
//
// The following messages have counterparts in the Go implementation of the Helium service.
// See the godoc for more information on these messages.
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{0}
}

type ProtocolID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolID string `protobuf:"bytes,1,opt,name=ProtocolID,proto3" json:"ProtocolID,omitempty"`
}

func (x *ProtocolID) Reset() {
	*x = ProtocolID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolID) ProtoMessage() {}

func (x *ProtocolID) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolID.ProtoReflect.Descriptor instead.
func (*ProtocolID) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolID) GetProtocolID() string {
	if x != nil {
		return x.ProtocolID
	}
	return ""
}

type SessionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionID) Reset() {
	*x = SessionID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionID) ProtoMessage() {}

func (x *SessionID) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionID.ProtoReflect.Descriptor instead.
func (*SessionID) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{2}
}

func (x *SessionID) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type NodeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{3}
}

func (x *NodeID) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type CiphertextID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiphertextId string `protobuf:"bytes,1,opt,name=ciphertext_id,json=ciphertextId,proto3" json:"ciphertext_id,omitempty"`
}

func (x *CiphertextID) Reset() {
	*x = CiphertextID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiphertextID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiphertextID) ProtoMessage() {}

func (x *CiphertextID) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiphertextID.ProtoReflect.Descriptor instead.
func (*CiphertextID) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{4}
}

func (x *CiphertextID) GetCiphertextId() string {
	if x != nil {
		return x.CiphertextId
	}
	return ""
}

type ProtocolEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *ProtocolDescriptor `protobuf:"bytes,1,opt,name=Descriptor,proto3" json:"Descriptor,omitempty"`
	Type        EventType           `protobuf:"varint,2,opt,name=Type,proto3,enum=helium_proto.EventType" json:"Type,omitempty"`
}

func (x *ProtocolEvent) Reset() {
	*x = ProtocolEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolEvent) ProtoMessage() {}

func (x *ProtocolEvent) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolEvent.ProtoReflect.Descriptor instead.
func (*ProtocolEvent) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{5}
}

func (x *ProtocolEvent) GetDescriptor_() *ProtocolDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ProtocolEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_Completed
}

type CircuitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *CircuitDescriptor `protobuf:"bytes,1,opt,name=Descriptor,proto3" json:"Descriptor,omitempty"`
	Type        EventType          `protobuf:"varint,2,opt,name=Type,proto3,enum=helium_proto.EventType" json:"Type,omitempty"`
}

func (x *CircuitEvent) Reset() {
	*x = CircuitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitEvent) ProtoMessage() {}

func (x *CircuitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitEvent.ProtoReflect.Descriptor instead.
func (*CircuitEvent) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{6}
}

func (x *CircuitEvent) GetDescriptor_() *CircuitDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *CircuitEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_Completed
}

type SetupEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolEvent *ProtocolEvent `protobuf:"bytes,1,opt,name=ProtocolEvent,proto3" json:"ProtocolEvent,omitempty"`
}

func (x *SetupEvent) Reset() {
	*x = SetupEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupEvent) ProtoMessage() {}

func (x *SetupEvent) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupEvent.ProtoReflect.Descriptor instead.
func (*SetupEvent) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{7}
}

func (x *SetupEvent) GetProtocolEvent() *ProtocolEvent {
	if x != nil {
		return x.ProtocolEvent
	}
	return nil
}

type ComputeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitEvent  *CircuitEvent  `protobuf:"bytes,1,opt,name=CircuitEvent,proto3" json:"CircuitEvent,omitempty"`
	ProtocolEvent *ProtocolEvent `protobuf:"bytes,2,opt,name=ProtocolEvent,proto3,oneof" json:"ProtocolEvent,omitempty"`
}

func (x *ComputeEvent) Reset() {
	*x = ComputeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeEvent) ProtoMessage() {}

func (x *ComputeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeEvent.ProtoReflect.Descriptor instead.
func (*ComputeEvent) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{8}
}

func (x *ComputeEvent) GetCircuitEvent() *CircuitEvent {
	if x != nil {
		return x.CircuitEvent
	}
	return nil
}

func (x *ComputeEvent) GetProtocolEvent() *ProtocolEvent {
	if x != nil {
		return x.ProtocolEvent
	}
	return nil
}

type NodeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*NodeEvent_SetupEvent
	//	*NodeEvent_ComputeEvent
	Event isNodeEvent_Event `protobuf_oneof:"Event"`
}

func (x *NodeEvent) Reset() {
	*x = NodeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeEvent) ProtoMessage() {}

func (x *NodeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeEvent.ProtoReflect.Descriptor instead.
func (*NodeEvent) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{9}
}

func (m *NodeEvent) GetEvent() isNodeEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *NodeEvent) GetSetupEvent() *SetupEvent {
	if x, ok := x.GetEvent().(*NodeEvent_SetupEvent); ok {
		return x.SetupEvent
	}
	return nil
}

func (x *NodeEvent) GetComputeEvent() *ComputeEvent {
	if x, ok := x.GetEvent().(*NodeEvent_ComputeEvent); ok {
		return x.ComputeEvent
	}
	return nil
}

type isNodeEvent_Event interface {
	isNodeEvent_Event()
}

type NodeEvent_SetupEvent struct {
	SetupEvent *SetupEvent `protobuf:"bytes,1,opt,name=SetupEvent,proto3,oneof"`
}

type NodeEvent_ComputeEvent struct {
	ComputeEvent *ComputeEvent `protobuf:"bytes,2,opt,name=ComputeEvent,proto3,oneof"`
}

func (*NodeEvent_SetupEvent) isNodeEvent_Event() {}

func (*NodeEvent_ComputeEvent) isNodeEvent_Event() {}

type ProtocolDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolType ProtocolType      `protobuf:"varint,1,opt,name=ProtocolType,proto3,enum=helium_proto.ProtocolType" json:"ProtocolType,omitempty"`
	Args         map[string]string `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Aggregator   *NodeID           `protobuf:"bytes,3,opt,name=Aggregator,proto3" json:"Aggregator,omitempty"`
	Participants []*NodeID         `protobuf:"bytes,4,rep,name=Participants,proto3" json:"Participants,omitempty"`
	Receivers    []*NodeID         `protobuf:"bytes,5,rep,name=Receivers,proto3" json:"Receivers,omitempty"`
}

func (x *ProtocolDescriptor) Reset() {
	*x = ProtocolDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolDescriptor) ProtoMessage() {}

func (x *ProtocolDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolDescriptor.ProtoReflect.Descriptor instead.
func (*ProtocolDescriptor) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{10}
}

func (x *ProtocolDescriptor) GetProtocolType() ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return ProtocolType_UNSPECIFIED
}

func (x *ProtocolDescriptor) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProtocolDescriptor) GetAggregator() *NodeID {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *ProtocolDescriptor) GetParticipants() []*NodeID {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ProtocolDescriptor) GetReceivers() []*NodeID {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type ShareMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolID   *ProtocolID  `protobuf:"bytes,1,opt,name=ProtocolID,proto3" json:"ProtocolID,omitempty"`
	ProtocolType ProtocolType `protobuf:"varint,2,opt,name=ProtocolType,proto3,enum=helium_proto.ProtocolType" json:"ProtocolType,omitempty"`
	AggregateFor []*NodeID    `protobuf:"bytes,3,rep,name=AggregateFor,proto3" json:"AggregateFor,omitempty"`
}

func (x *ShareMetadata) Reset() {
	*x = ShareMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareMetadata) ProtoMessage() {}

func (x *ShareMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareMetadata.ProtoReflect.Descriptor instead.
func (*ShareMetadata) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{11}
}

func (x *ShareMetadata) GetProtocolID() *ProtocolID {
	if x != nil {
		return x.ProtocolID
	}
	return nil
}

func (x *ShareMetadata) GetProtocolType() ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return ProtocolType_UNSPECIFIED
}

func (x *ShareMetadata) GetAggregateFor() []*NodeID {
	if x != nil {
		return x.AggregateFor
	}
	return nil
}

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ShareMetadata `protobuf:"bytes,1,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	Share    []byte         `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{12}
}

func (x *Share) GetMetadata() *ShareMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Share) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

type AggregationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregatedShare *Share `protobuf:"bytes,1,opt,name=AggregatedShare,proto3" json:"AggregatedShare,omitempty"`
}

func (x *AggregationOutput) Reset() {
	*x = AggregationOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationOutput) ProtoMessage() {}

func (x *AggregationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationOutput.ProtoReflect.Descriptor instead.
func (*AggregationOutput) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{13}
}

func (x *AggregationOutput) GetAggregatedShare() *Share {
	if x != nil {
		return x.AggregatedShare
	}
	return nil
}

type CircuitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Args map[string]string `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CircuitSignature) Reset() {
	*x = CircuitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSignature) ProtoMessage() {}

func (x *CircuitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSignature.ProtoReflect.Descriptor instead.
func (*CircuitSignature) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{14}
}

func (x *CircuitSignature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CircuitSignature) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type CircuitID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitID string `protobuf:"bytes,1,opt,name=CircuitID,proto3" json:"CircuitID,omitempty"`
}

func (x *CircuitID) Reset() {
	*x = CircuitID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitID) ProtoMessage() {}

func (x *CircuitID) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitID.ProtoReflect.Descriptor instead.
func (*CircuitID) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{15}
}

func (x *CircuitID) GetCircuitID() string {
	if x != nil {
		return x.CircuitID
	}
	return ""
}

type CircuitDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitSignature *CircuitSignature  `protobuf:"bytes,1,opt,name=CircuitSignature,proto3" json:"CircuitSignature,omitempty"`
	CircuitID        *CircuitID         `protobuf:"bytes,2,opt,name=CircuitID,proto3" json:"CircuitID,omitempty"`
	NodeMapping      map[string]*NodeID `protobuf:"bytes,3,rep,name=NodeMapping,proto3" json:"NodeMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Evaluator        *NodeID            `protobuf:"bytes,4,opt,name=Evaluator,proto3" json:"Evaluator,omitempty"`
}

func (x *CircuitDescriptor) Reset() {
	*x = CircuitDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitDescriptor) ProtoMessage() {}

func (x *CircuitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitDescriptor.ProtoReflect.Descriptor instead.
func (*CircuitDescriptor) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{16}
}

func (x *CircuitDescriptor) GetCircuitSignature() *CircuitSignature {
	if x != nil {
		return x.CircuitSignature
	}
	return nil
}

func (x *CircuitDescriptor) GetCircuitID() *CircuitID {
	if x != nil {
		return x.CircuitID
	}
	return nil
}

func (x *CircuitDescriptor) GetNodeMapping() map[string]*NodeID {
	if x != nil {
		return x.NodeMapping
	}
	return nil
}

func (x *CircuitDescriptor) GetEvaluator() *NodeID {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

type Ciphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []byte              `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Metadata   *CiphertextMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Ciphertext) Reset() {
	*x = Ciphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ciphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ciphertext) ProtoMessage() {}

func (x *Ciphertext) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ciphertext.ProtoReflect.Descriptor instead.
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{17}
}

func (x *Ciphertext) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *Ciphertext) GetMetadata() *CiphertextMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CiphertextMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *CiphertextID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type *CiphertextType `protobuf:"varint,2,opt,name=type,proto3,enum=helium_proto.CiphertextType,oneof" json:"type,omitempty"`
}

func (x *CiphertextMetadata) Reset() {
	*x = CiphertextMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helium_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiphertextMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiphertextMetadata) ProtoMessage() {}

func (x *CiphertextMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_helium_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiphertextMetadata.ProtoReflect.Descriptor instead.
func (*CiphertextMetadata) Descriptor() ([]byte, []int) {
	return file_helium_proto_rawDescGZIP(), []int{18}
}

func (x *CiphertextMetadata) GetId() *CiphertextID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CiphertextMetadata) GetType() CiphertextType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CiphertextType_UNSPECIFIED_CT_TYPE
}

var File_helium_proto protoreflect.FileDescriptor

var file_helium_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x44, 0x22, 0x2a, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x21,
	0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x0c, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x92, 0x01, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x0c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x22,
	0x56, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0f,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0f, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x10,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x09, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x22, 0xf4, 0x02, 0x0a, 0x11, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x10,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x49, 0x44, 0x52, 0x09, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x52, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x54, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a,
	0x0a, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x42, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03,
	0x2a, 0x6a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4b, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4b,
	0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4b, 0x47, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x4b, 0x47, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x54, 0x47, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x43,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x43, 0x4b, 0x53, 0x10, 0x08, 0x2a, 0x4f, 0x0a, 0x0e,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x46, 0x56, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x56, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4b, 0x4b,
	0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x47, 0x53, 0x57, 0x10, 0x04, 0x32, 0xaf, 0x03,
	0x0a, 0x06, 0x48, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x45, 0x76, 0x61,
	0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x68,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x4d, 0x63, 0x74, 0x2f, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helium_proto_rawDescOnce sync.Once
	file_helium_proto_rawDescData = file_helium_proto_rawDesc
)

func file_helium_proto_rawDescGZIP() []byte {
	file_helium_proto_rawDescOnce.Do(func() {
		file_helium_proto_rawDescData = protoimpl.X.CompressGZIP(file_helium_proto_rawDescData)
	})
	return file_helium_proto_rawDescData
}

var file_helium_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_helium_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_helium_proto_goTypes = []interface{}{
	(EventType)(0),             // 0: helium_proto.EventType
	(ProtocolType)(0),          // 1: helium_proto.ProtocolType
	(CiphertextType)(0),        // 2: helium_proto.CiphertextType
	(*Void)(nil),               // 3: helium_proto.Void
	(*ProtocolID)(nil),         // 4: helium_proto.ProtocolID
	(*SessionID)(nil),          // 5: helium_proto.SessionID
	(*NodeID)(nil),             // 6: helium_proto.NodeID
	(*CiphertextID)(nil),       // 7: helium_proto.CiphertextID
	(*ProtocolEvent)(nil),      // 8: helium_proto.ProtocolEvent
	(*CircuitEvent)(nil),       // 9: helium_proto.CircuitEvent
	(*SetupEvent)(nil),         // 10: helium_proto.SetupEvent
	(*ComputeEvent)(nil),       // 11: helium_proto.ComputeEvent
	(*NodeEvent)(nil),          // 12: helium_proto.NodeEvent
	(*ProtocolDescriptor)(nil), // 13: helium_proto.ProtocolDescriptor
	(*ShareMetadata)(nil),      // 14: helium_proto.ShareMetadata
	(*Share)(nil),              // 15: helium_proto.Share
	(*AggregationOutput)(nil),  // 16: helium_proto.AggregationOutput
	(*CircuitSignature)(nil),   // 17: helium_proto.CircuitSignature
	(*CircuitID)(nil),          // 18: helium_proto.CircuitID
	(*CircuitDescriptor)(nil),  // 19: helium_proto.CircuitDescriptor
	(*Ciphertext)(nil),         // 20: helium_proto.Ciphertext
	(*CiphertextMetadata)(nil), // 21: helium_proto.CiphertextMetadata
	nil,                        // 22: helium_proto.ProtocolDescriptor.ArgsEntry
	nil,                        // 23: helium_proto.CircuitSignature.ArgsEntry
	nil,                        // 24: helium_proto.CircuitDescriptor.NodeMappingEntry
}
var file_helium_proto_depIdxs = []int32{
	13, // 0: helium_proto.ProtocolEvent.Descriptor:type_name -> helium_proto.ProtocolDescriptor
	0,  // 1: helium_proto.ProtocolEvent.Type:type_name -> helium_proto.EventType
	19, // 2: helium_proto.CircuitEvent.Descriptor:type_name -> helium_proto.CircuitDescriptor
	0,  // 3: helium_proto.CircuitEvent.Type:type_name -> helium_proto.EventType
	8,  // 4: helium_proto.SetupEvent.ProtocolEvent:type_name -> helium_proto.ProtocolEvent
	9,  // 5: helium_proto.ComputeEvent.CircuitEvent:type_name -> helium_proto.CircuitEvent
	8,  // 6: helium_proto.ComputeEvent.ProtocolEvent:type_name -> helium_proto.ProtocolEvent
	10, // 7: helium_proto.NodeEvent.SetupEvent:type_name -> helium_proto.SetupEvent
	11, // 8: helium_proto.NodeEvent.ComputeEvent:type_name -> helium_proto.ComputeEvent
	1,  // 9: helium_proto.ProtocolDescriptor.ProtocolType:type_name -> helium_proto.ProtocolType
	22, // 10: helium_proto.ProtocolDescriptor.Args:type_name -> helium_proto.ProtocolDescriptor.ArgsEntry
	6,  // 11: helium_proto.ProtocolDescriptor.Aggregator:type_name -> helium_proto.NodeID
	6,  // 12: helium_proto.ProtocolDescriptor.Participants:type_name -> helium_proto.NodeID
	6,  // 13: helium_proto.ProtocolDescriptor.Receivers:type_name -> helium_proto.NodeID
	4,  // 14: helium_proto.ShareMetadata.ProtocolID:type_name -> helium_proto.ProtocolID
	1,  // 15: helium_proto.ShareMetadata.ProtocolType:type_name -> helium_proto.ProtocolType
	6,  // 16: helium_proto.ShareMetadata.AggregateFor:type_name -> helium_proto.NodeID
	14, // 17: helium_proto.Share.Metadata:type_name -> helium_proto.ShareMetadata
	15, // 18: helium_proto.AggregationOutput.AggregatedShare:type_name -> helium_proto.Share
	23, // 19: helium_proto.CircuitSignature.Args:type_name -> helium_proto.CircuitSignature.ArgsEntry
	17, // 20: helium_proto.CircuitDescriptor.CircuitSignature:type_name -> helium_proto.CircuitSignature
	18, // 21: helium_proto.CircuitDescriptor.CircuitID:type_name -> helium_proto.CircuitID
	24, // 22: helium_proto.CircuitDescriptor.NodeMapping:type_name -> helium_proto.CircuitDescriptor.NodeMappingEntry
	6,  // 23: helium_proto.CircuitDescriptor.Evaluator:type_name -> helium_proto.NodeID
	21, // 24: helium_proto.Ciphertext.metadata:type_name -> helium_proto.CiphertextMetadata
	7,  // 25: helium_proto.CiphertextMetadata.id:type_name -> helium_proto.CiphertextID
	2,  // 26: helium_proto.CiphertextMetadata.type:type_name -> helium_proto.CiphertextType
	6,  // 27: helium_proto.CircuitDescriptor.NodeMappingEntry.value:type_name -> helium_proto.NodeID
	3,  // 28: helium_proto.Helium.Register:input_type -> helium_proto.Void
	15, // 29: helium_proto.Helium.PutShare:input_type -> helium_proto.Share
	13, // 30: helium_proto.Helium.GetAggregationOutput:input_type -> helium_proto.ProtocolDescriptor
	7,  // 31: helium_proto.Helium.GetCiphertext:input_type -> helium_proto.CiphertextID
	20, // 32: helium_proto.Helium.PutCiphertext:input_type -> helium_proto.Ciphertext
	19, // 33: helium_proto.Helium.EvalCircuit:input_type -> helium_proto.CircuitDescriptor
	12, // 34: helium_proto.Helium.Register:output_type -> helium_proto.NodeEvent
	3,  // 35: helium_proto.Helium.PutShare:output_type -> helium_proto.Void
	16, // 36: helium_proto.Helium.GetAggregationOutput:output_type -> helium_proto.AggregationOutput
	20, // 37: helium_proto.Helium.GetCiphertext:output_type -> helium_proto.Ciphertext
	7,  // 38: helium_proto.Helium.PutCiphertext:output_type -> helium_proto.CiphertextID
	3,  // 39: helium_proto.Helium.EvalCircuit:output_type -> helium_proto.Void
	34, // [34:40] is the sub-list for method output_type
	28, // [28:34] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_helium_proto_init() }
func file_helium_proto_init() {
	if File_helium_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helium_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiphertextID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ciphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helium_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiphertextMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_helium_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_helium_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*NodeEvent_SetupEvent)(nil),
		(*NodeEvent_ComputeEvent)(nil),
	}
	file_helium_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helium_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helium_proto_goTypes,
		DependencyIndexes: file_helium_proto_depIdxs,
		EnumInfos:         file_helium_proto_enumTypes,
		MessageInfos:      file_helium_proto_msgTypes,
	}.Build()
	File_helium_proto = out.File
	file_helium_proto_rawDesc = nil
	file_helium_proto_goTypes = nil
	file_helium_proto_depIdxs = nil
}
