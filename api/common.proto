syntax = "proto3";

option go_package = "github.com/ldsec/helium/pkg/api";

package helium_proto;

message ProtocolID {
    string ProtocolID = 1;
}

message SessionID {
    string session_id = 1;
}

message NodeID {
    string node_id = 1;
}

message CiphertextID {
    string ciphertext_id = 1;
}

message Void {
}

/* SignatureType is a enumerate type for identifying protocol types */
enum SignatureType {
    NONE = 0;
    ED25519 = 1;
}

message Signature {
    SignatureType type = 1;
    bytes signature = 2;
    NodeID signer = 3;
}

/* ProtocolType is a enumerate type for identifying protocol types */
enum ProtocolType {
    UNSPECIFIED = 0;
    SKG = 1; /* secret-key generation */
    CKG = 2; /* public encryption-key generation */
    RKG = 3; /* public relinearization-key generation */
    RTG = 4; /* public rotation-key generation */
    CKS = 5; /* collective switching to collective secret-key */
    DEC = 6; /* collective decryption */
    PCKS = 7; /* collective switching to known public-key */
    PK   = 8; /* public key sharing */
}

enum ProtocolStatus {
    OK = 0;
    RUNNING = 1;
    FAILED = 2;
}


/* ProtocolDescriptor is a message type to describe a protocol by its type
and arguments. It should be sufficient for parties to instantiate a protocol
within a given session */
message ProtocolDescriptor {
    ProtocolType ProtocolType = 1;
    map<string, string> Args = 2;
    NodeID Aggregator = 3;
    repeated NodeID Participants = 4;
    repeated NodeID Receivers = 5;
}

message ProtocolUpdate {
    ProtocolDescriptor ProtocolDescriptor = 1;
    ProtocolStatus ProtocolStatus = 2;
}

message ShareDescriptor {
    ProtocolID ProtocolID = 1;
    ProtocolType ProtocolType = 3;
    NodeID Sender = 4;
    repeated NodeID Receivers = 5; 
    optional uint64 Round = 6;
    repeated NodeID AggregateFor = 7;
}

/* Share represents a party's share in the protocol described by its ProtocolDesc
field. */
message Share {
    ShareDescriptor Desc = 1;
    bytes share = 3;
    Signature signature = 4;
}

message AggregationOutput {
    Share AggregatedShare = 2;
}
