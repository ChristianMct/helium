syntax = "proto3";

option go_package = "github.com/ChristianMct/helium/transport/pb";

package helium_proto;

/* 
    SERVICE DEFINITIONs
*/

/* Helium is a service run helium nodes. In the current implementation, only
 the helper node runs this service and acts as a centralized transport/coordinator/
 aggregator and evaluator for its peer nodes. */
service Helium {
    /* Register registers the caller as a peer node to the helium server */
    rpc Register(Void) returns (stream NodeEvent);

    /* PutShare pushes the caller's share in the protocol described by the Share.ShareDescriptor
    field to the callee. */
    rpc PutShare (Share) returns (Void) {}

    /* GetShare queries the aggregation output of the protocol described by PrototocolDescriptor */
    rpc GetAggregationOutput(ProtocolDescriptor) returns (AggregationOutput) {}

    /* GetCiphertext queries the ciphertext with the given ID from the callee */
    rpc GetCiphertext(CiphertextID) returns (Ciphertext) {}

    /* PutCiphertext pushes the ciphertext to the callee */
    rpc PutCiphertext(Ciphertext) returns (CiphertextID) {}
}

/* 
    MESSAGE DEFINITIONS

    The following messages have counterparts in the Go implementation of the Helium service.
    See the godoc for more information on these messages.
*/
message Void {
}

message ProtocolID {
    string ProtocolID = 1;
}

message SessionID {
    string session_id = 1;
}

message NodeID {
    string node_id = 1;
}

message CiphertextID {
    string ciphertext_id = 1;
}

enum EventType {
    Completed = 0;
	Started = 1; 
	Executing = 2;
	Failed = 3;
}

message ProtocolEvent {
    ProtocolDescriptor Descriptor = 1;
    EventType Type = 2;
}

message CircuitEvent {
    CircuitDescriptor Descriptor = 1;
    EventType Type = 2;
}

message SetupEvent {
    ProtocolEvent ProtocolEvent = 1;
}

message ComputeEvent {
    CircuitEvent CircuitEvent = 1;
    optional ProtocolEvent ProtocolEvent = 2;
}

message NodeEvent {
    oneof Event {
        SetupEvent SetupEvent = 1;
        ComputeEvent ComputeEvent = 2;
    }
}



enum ProtocolType {
    UNSPECIFIED = 0;
    SKG = 1; /* secret-key generation */
    CKG = 2; /* public encryption-key generation */
    RKG_1 = 3; /* first round of public relinearization-key generation */
    RKG = 4; /* second round of public relinearization-key generation */
    RTG = 5; /* public rotation-key generation */
    CKS = 6; /* collective switching to collective secret-key */
    DEC = 7; /* collective decryption */
    PCKS = 8; /* collective switching to known public-key */
}


message ProtocolDescriptor {
    ProtocolType ProtocolType = 1;
    map<string, string> Args = 2;
    NodeID Aggregator = 3;
    repeated NodeID Participants = 4;
    repeated NodeID Receivers = 5;
}


message ShareMetadata {
    ProtocolID ProtocolID = 1;
    ProtocolType ProtocolType = 2;
    repeated NodeID AggregateFor = 3;
}

message Share {
    ShareMetadata Metadata = 1;
    bytes share = 2;
}

message AggregationOutput {
    Share AggregatedShare = 1;
}

message CircuitSignature {
    string Name = 1;
    map<string, string> Args = 2;
}

message CircuitID {
    string CircuitID = 1;
}

message CircuitDescriptor {
    CircuitSignature CircuitSignature = 1;
    CircuitID CircuitID = 2;
    map<string, NodeID> NodeMapping = 3;
    NodeID Evaluator = 4;
}

message Ciphertext {
    bytes ciphertext = 1;
    CiphertextMetadata metadata = 2;
}

enum CiphertextType {
    UNSPECIFIED_CT_TYPE = 0;
    BFV = 1; 
    BGV = 2; 
    CKKS = 3;
    RGSW = 4;
}

message CiphertextMetadata {
    CiphertextID id = 1;
    optional CiphertextType type = 2;
}
